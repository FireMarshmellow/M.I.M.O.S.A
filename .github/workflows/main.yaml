name: Build and Release

on:
  push:
    branches:
      - Main
      - feature/github-actions
  create:
    tags:
      - "v*" # Trigger on new tags

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt  # Replace with your requirements file

      - name: Determine version
        id: version
        run: echo "::set-output name=version::$(if [ -n "$GITHUB_REF" ]; then echo $GITHUB_REF | awk -F/ '{print $3}'; else echo "1.0.$(git rev-list --count HEAD)-$(echo ${{ github.sha }} | head -c7)"; fi)"

      - name: Build executable
        run: |
          # Replace "app.py" with the name of your main Python script
          # Replace "output_file_name" with the desired name of the .exe file
          pyinstaller --onefile app.py --name output_file_name

      - name: Set outputs
        id: outputs
        run: echo "upload_url=$(echo ${{ github.event.repository.releases.url }} | sed 's/{\/id}//')" >> $GITHUB_ENV

  docker:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Determine version
        id: version
        run: echo "::set-output name=version::$(if [ -n "$GITHUB_REF" ]; then echo $GITHUB_REF | awk -F/ '{print $3}'; else echo "1.0.$(git rev-list --count HEAD)-$(echo ${{ github.sha }} | head -c7)"; fi)"

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile # Replace with the path to your Dockerfile
          platforms: linux/amd64,linux/arm64 # Adjust the platforms as needed
          push: true
          tags: |
            tpickett/mimosa:latest
            tpickett/mimosa:${{ steps.version.outputs.version }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ env.upload_url }}
          asset_path: ./dist/output_file_name
          asset_name: output_file_name.exe
          asset_content_type: application/octet-stream
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
